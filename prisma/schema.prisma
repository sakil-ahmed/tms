generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  password     String
  name         String
  role         Role
  refreshToken String?
  verified     Boolean
  teams        TeamMember[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  Task Task[]

  Comment Comment[]
}

model Team {
  id           String             @id @default(cuid())
  name         String
  description  String?
  members      TeamMember[]
  projects     Project[]
  customRoles  CustomRole[]
  taskStatuses CustomTaskStatus[]
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
}

model TeamMember {
  id           String      @id @default(cuid())
  userId       String
  teamId       String
  role         TeamRole
  customRoleId String?
  user         User        @relation(fields: [userId], references: [id])
  team         Team        @relation(fields: [teamId], references: [id])
  customRole   CustomRole? @relation(fields: [customRoleId], references: [id])
  createdAt    DateTime    @default(now())
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  teamId      String
  tasks       Task[]
  team        Team     @relation(fields: [teamId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Task {
  id          String             @id @default(cuid())
  title       String
  description String?
  status      CustomTaskStatus[]
  projectId   String
  assignedTo  String?
  project     Project            @relation(fields: [projectId], references: [id])
  assignee    User?              @relation(fields: [assignedTo], references: [id])
  comments    Comment[]
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  taskId    String
  userId    String
  task      Task     @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model CustomRole {
  id          String   @id @default(cuid())
  name        String
  teamId      String
  permissions Json
  team        Team     @relation(fields: [teamId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  TeamMember TeamMember[]
}

model CustomTaskStatus {
  id        String   @id @default(cuid())
  name      String
  color     String
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Task Task[]
}

enum Role {
  ADMIN
  USER
}

enum TeamRole {
  LEADER
  MEMBER
}

model Otp {
  id         String   @id @default(cuid())
  email      String
  otp        String   @unique
  expiresAt  DateTime
  hashedData String
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
}
